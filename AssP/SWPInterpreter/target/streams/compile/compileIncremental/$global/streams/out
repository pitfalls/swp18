[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(/home/alex/TUGRAZ_REPO/swp18/AssP/SWPInterpreter/src/main/scala/Parser.scala, /home/alex/TUGRAZ_REPO/swp18/AssP/SWPInterpreter/src/main/scala/AST.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(ID, ParseProgram, Node, Program, Integer, Bool_false, FunctionDeclaration, ExpParser, Bool_true)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(ID, ParseProgram, Node, Program, Integer, Bool_false, FunctionDeclaration, ExpParser, Bool_true)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/home/alex/TUGRAZ_REPO/swp18/AssP/SWPInterpreter/src/main/scala/Parser.scala, /home/alex/TUGRAZ_REPO/swp18/AssP/SWPInterpreter/src/main/scala/AST.scala)[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 2 Scala sources to /home/alex/TUGRAZ_REPO/swp18/AssP/SWPInterpreter/target/scala-2.12/classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.0.5:compile for Scala 2.12.5[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.0.5:compile for Scala 2.12.5[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 58afaf05 for Scala compiler version 2.12.5[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes:/home/alex/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.5.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/alex/TUGRAZ_REPO/swp18/AssP/SWPInterpreter/target/scala-2.12/classes:/home/alex/.ivy2/cache/org.scala-lang.modules/scala-parser-combinators_2.12/bundles/scala-parser-combinators_2.12-1.1.0.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 2.035904566 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from braces_Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(braces_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(braces_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(braces_Node,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(braces_Node,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(braces_Node,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(v1,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(braces_Node;init;,[Default]))) invalidates 2 classes due to The braces_Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(braces_Node,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(v1,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(braces_Node;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(braces_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Cond_Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(Cond_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Cond_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(ne,[Default]), UsedName(Cond_Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Cond_Node,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(Cond_Node;init;,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(n3,[Default]), UsedName(n1,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(n2,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(Cond_Node,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(copy$default$2,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(copy$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 2 classes due to The Cond_Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(Cond_Node;init;,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(n3,[Default]), UsedName(n1,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(n2,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(Cond_Node,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(copy$default$2,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(copy$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Cond_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from ID...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(ID)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(ID)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(ID,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(ID;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(ID,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The ID has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(ID;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(ID,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(ID)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Bool_false...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(Bool_false)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Bool_false)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Bool_false,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(Bool_false,[Default]), UsedName(Bool_false;init;,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The Bool_false has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(Bool_false,[Default]), UsedName(Bool_false;init;,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Bool_false)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from ParseProgram...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(ParseProgram)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(ParseProgram)[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of SWPInterpreter. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(ParseProgram,ModifiedNames(changes = UsedName(exp,[Default]))) invalidates 1 classes due to The ParseProgram has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(exp,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(ParseProgram)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Expression_Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(Expression_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Expression_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(ne,[Default]), UsedName(Expression_Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Expression_Node,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(Expression_Node,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Expression_Node;init;,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(node,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 2 classes due to The Expression_Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(Expression_Node,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Expression_Node;init;,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(node,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Expression_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from ExpParser...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding ParseProgram by ExpParser[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(ParseProgram, ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of SWPInterpreter. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(ExpParser,ModifiedNames(changes = UsedName(exp,[Default]))) invalidates 2 classes due to The ExpParser has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(exp,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(ParseProgram, ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Integer_Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(Integer_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Integer_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Integer_Node,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Integer_Node,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(Integer_Node,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(Integer_Node;init;,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 2 classes due to The Integer_Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(Integer_Node,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(Integer_Node;init;,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Integer_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from ID_Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(ID_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(ID_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(ne,[Default]), UsedName(ID_Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(ID_Node,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(ID_Node;init;,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(ID_Node,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 2 classes due to The ID_Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(ID_Node;init;,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(ID_Node,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(ID_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Variable_Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(Variable_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Variable_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Variable_Node,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Variable_Node,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(Variable_Node,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(Variable_Node;init;,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 2 classes due to The Variable_Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(Variable_Node,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(Variable_Node;init;,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Variable_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from VarAss_Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(VarAss_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(VarAss_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(ne,[Default]), UsedName(VarAss_Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(VarAss_Node,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(v2,[Default]), UsedName(copy,[Default]), UsedName(v1,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(VarAss_Node;init;,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(VarAss_Node,[Default]), UsedName(getClass,[Default]), UsedName(copy$default$2,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 2 classes due to The VarAss_Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(v2,[Default]), UsedName(copy,[Default]), UsedName(v1,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(VarAss_Node;init;,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(VarAss_Node,[Default]), UsedName(getClass,[Default]), UsedName(copy$default$2,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(VarAss_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from VarDecl_Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(VarDecl_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(VarDecl_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(ne,[Default]), UsedName(VarDecl_Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(VarDecl_Node,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(v2,[Default]), UsedName(copy,[Default]), UsedName(v1,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(VarDecl_Node;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(copy$default$2,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(VarDecl_Node,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 2 classes due to The VarDecl_Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(v2,[Default]), UsedName(copy,[Default]), UsedName(v1,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(VarDecl_Node;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(copy$default$2,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(VarDecl_Node,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(VarDecl_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding ID_Node by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding Expression_Node by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding Integer_Node by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding VarAss_Node by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding Program by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding List_Node by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding Bool_false_Node by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding Variable_Node by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding braces_Node by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding Cond_Node by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding Bool_True_Node by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding Call_Node by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding FunctionDeclaration by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding VarDecl_Node by Node[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(ID_Node, Expression_Node, Integer_Node, Node, VarAss_Node, Program, List_Node, Bool_false_Node, Variable_Node, braces_Node, Cond_Node, Bool_True_Node, Call_Node, FunctionDeclaration, VarDecl_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of ParseProgram. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of Interpreter. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of SWPInterpreter. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Node,ModifiedNames(changes = UsedName(Node,[Default]))) invalidates 16 classes due to The Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Node,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(ID_Node, Expression_Node, Integer_Node, Node, VarAss_Node, Program, List_Node, Bool_false_Node, Variable_Node, braces_Node, Cond_Node, Bool_True_Node, Call_Node, FunctionDeclaration, VarDecl_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from List_Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(List_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(List_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(ne,[Default]), UsedName(List_Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(List_Node,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(List_Node;init;,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(List_Node,[Default]), UsedName(node,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 2 classes due to The List_Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(List_Node;init;,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(List_Node,[Default]), UsedName(node,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(List_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Bool_true...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(Bool_true)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Bool_true)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Bool_true,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Bool_true,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(Bool_true;init;,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The Bool_true has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Bool_true,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(Bool_true;init;,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Bool_true)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Bool_True_Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(Bool_True_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Bool_True_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(Bool_True_Node,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Bool_True_Node,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(Bool_True_Node,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(Bool_True_Node;init;,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 2 classes due to The Bool_True_Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(Bool_True_Node,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(Bool_True_Node;init;,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Bool_True_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Bool_false_Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(Bool_false_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Bool_false_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of ExpParser: Set(UsedName(ne,[Default]), UsedName(Bool_false_Node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Bool_false_Node,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(Bool_false_Node;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(Bool_false_Node,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 2 classes due to The Bool_false_Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(Bool_false_Node;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(Bool_false_Node,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Bool_false_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Integer...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(Integer)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Integer)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Integer,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(Integer,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(Integer;init;,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The Integer has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(Integer,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(Integer;init;,[Default]), UsedName(finalize,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Integer)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Call_Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(Call_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Call_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Call_Node,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Call_Node,[Default]), UsedName(getClass,[Default]), UsedName(copy$default$2,[Default]), UsedName(finalize,[Default]), UsedName(Call_Node;init;,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(node,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The Call_Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(synchronized,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Call_Node,[Default]), UsedName(getClass,[Default]), UsedName(copy$default$2,[Default]), UsedName(finalize,[Default]), UsedName(Call_Node;init;,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(node,[Default]), UsedName(equals,[Default]), UsedName(value,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Call_Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set(Program, FunctionDeclaration)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(Program, FunctionDeclaration)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding ParseProgram by Program[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding SWPInterpreter by ParseProgram[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding ExpParser by Program[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding Interpreter by Program[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set(ParseProgram, ExpParser)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
